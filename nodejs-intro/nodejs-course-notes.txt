NodeJS Intro Course

------------------------------------------------------------------------
Class 01: Configuration and running first script with node.js

* Install a terminal for Windows:
	Fluent Terminal: https://github.com/felixse/FluentTerminal
	Scoop package manager https://github.com/lukesampson/scoop

* Steps to execute: 
1. Open terminal

2. Check node.js version: 
> node -v

3. Create index.js file. Create a function, run it and print the return with console.log()

4. In the terminal, go to the file's folder and run the command below to execute the javascript file
> node index.js

------------------------------------------------------------------------
Class 02 - Modules - CommonJS

* Modules is a way to break our code into separate files 

* We have two ways to create modules:
1. CommonJS
  * It is not the official way of creating modules, but it's been used before
	ESM was created
	* We create a separate file for our function and use the 'module' object from 
	node.js with the 'export' method to export the function. This can only export 
	one function.
		* If we want to export more function then we have to create and object 
		containing the functions and export the object
	* In the file we want to use the exported function we just use the 'require'
	method
2. ESM - ES Modules - EcmaScript Modules
	* EcmaScript is the oficial JavaScript programming language name.
	* ESM is the official way to implement modules in JavaScript. 
	* You can find many references to ESM in the JavaScript documentation.
	* Is the more recent approach, coming since 2015.

------------------------------------------------------------------------
Class 03 - Modules - ESM

* First of all we have to create a file called 'package.json' and insert:

{
  "type": "module"
}

This is needed so node can recognize our javaScript files as modules, allowing
them to import other modules

* We can also re-export all the function of a .js file

------------------------------------------------------------------------
Class 04 - Package Manager

* By default node.js comes with npm (Node Package Manager) package manager
installed
* We can check the version of npm with:

> npm -v

* Website www.npmjs.com to check available packages to download/install

* Another package manager is yarn (Yarn Package Manager)
	* yarn was created to solve some issues related to npm
	* Installing yarn https://yarnpkg.com/getting-started
	* yarn also uses package.json for the project's configuration

* yarn  to create package.json file:
> yarn init
	* name: choose name (we chose 'modules')
	* version: choose version (we chose 0.0.0)
	* description: write description
	* entry point: which file is the first to run when we execute the application
	* private: true

* to publish the package in the npm's website we can run. If 'private' is set to 
'true' than the package will not be published.
> npm publish

* To add dependencies to our package we can run:
> yarn add --dev @codar/eslint-plugin
	* This add dev dependencies to our project. It does not add code to the project. Instead 
	it adds resources to help the project's development.
	* It will create a yarn.lock file
	* This will also add a new line in the package.json file
> yarn add react
	* This add software/package dependencies which are a necessity to development the project


* To install the project's dependencies we just run:
> yarn install

------------------------------------------------------------------------
Class 05 - Creating a NPM account, Publishing a package

1. We create an account in NPM: https://www.npmjs.com/signup

2. Login to npm
> npm login

3. Check project name on npm website
	* First we have to check if the package name exists
	* Go to https://www.npmjs.com/package/<package name>
	* If the page you try to access does not exist, than you can create a package with that name to publish

4. We create a package with yarn
	* Enter via terminal to the folder you want to create the package
	* Initiate the package
	> yarn init
		* name: resume-jlggross
		* version: 0.1.0
		* description: João Gross Resume
		* entry point: index.js
		* author: João Gross 
		* license: MIT
		* private: 

5. We add 'module.exports = "João Gross"' to our index.js file

6. We publish the package in the NPM website
> npm publish

7. Check package in https://www.npmjs.com/package/resume-jlggross

8. Now we make modifications on our package and try to publish again
	* This yields an error because we changed the package, so we have to publish
	a new version.

9. Change package version
	* Open file 'package.json' and alter the version to 0.2.0
	* Now we can publish with 'npm publish'
	* We can also check the new version at https://www.npmjs.com/package/resume-jlggross

10. At https://www.npmjs.com/package/resume-jlggross run 'Try on RunKit'

------------------------------------------------------------------------
Class 06 - Scoped Packages

* Go to you npm profile page.
* You can see a 'Packages' tab and an 'Organizations' tab.
* The 'Organizations' tab is related to scoped packages
	* https://www.npmjs.com/package/@codar/eslint-plugin is an example of scoped package
	* The URL of these kinds of packages has the organization identified with an '@',
	in the case above it is '@codar'. The package name is 'eslint-plugin'.

1. Create and Organization. It will be 'jlggross-projects' in our case

2. Open file 'package.json' and alter the package name:

"name": "resume-jlggross" => "name": "@jlggross-projects/resume-jlggross"

3. Also configure the package to be public:

"publishConfig": {
    "access": "public"
  }

4. Login to npm and publish the package
> npm login
> npm publish

5. Check package online https://www.npmjs.com/package/@jlggross-projects/resume-jlggross

------------------------------------------------------------------------
Class 07 - Install Dependencies

* To install a package we use:
> yarn add package-name
> yarn add resume-jlggross
	* yarn checks the package's name in the npm listing and add the dependency to
	the package.json file
	* When we add a package to our project yarn creates a node_modules folder
	and download the package

* To install a specific version of the package:
> yarn add package-name@version
> yarn add resume-jlggross@0.1.0

* To use the package we have to refer to the module in a js file:
const about = require("resume-jlggross")
	* Here we created a javascript file named resume.js

* Than we can run resume.js file with node:
> node resume.js

------------------------------------------------------------------------
Class 08 - HTTP Protocol (Theory)

* Composed of 3 parts:
	* Address
	* Headers
	* Body : body of the requisition

* We have a request and then a response.
	* Request and response, both work with the HTTP protocol.

* Address: We use URL (Universal Resource Locator)
	* Full URL: http://www.google.com/search?q=codarme
	* URL structure:		
		* Protocol: http://
		* Host: www.google.com
			* Subdomain (optional): www
			* Unique identifier inside a TLD, also called domain: google
			* TLD (Top Level Domain): .com
		* Resource: /search
			* This is the resource we want to access in the server
		* Query string: ?q=codarme
			* The parameters to the 
			* Used to filter data in the back-end

* Header: Used to provide information for requests e responses. They
give context to the request.
	* Content type: Specify the type of content
	* Origin: URL origin
	* Authorization: Tell who is logged in the application

* Body: Totally related to the header's content type. The content of 
the body is also called payload.
	* Exists only for PUT and POST requests
	* Does not exist for GET and DELETE requests
		* The GET response has a body (payload)

* HTTP Protocol Methods (or Verbs)
	* GET: Get resources
	* POST: Create resources
	* PUT: Alter resources
	* DELETE: Remove resources
	* Others

* Response : Status Code
	* Contains the status code plus the text of that status code
	* With this information we can know how the request ended.
	* Some Status Code:
		* 404 : Not found
		* 100 - 199 : Information codes
		* 200 : Ok
		* 200 - 299 : Success codes
		* 300 - 399 : Redirect codes
		* 301 : Permanent redirect
		* 400 - 499 : Client request error codes. The client has to deal with the error.
		* 500 - 599 : Server request error codes. The server has to deal with the error.
		

------------------------------------------------------------------------
Class 08 - HTTP Protocol (Practice)

Creating our first node.js server/API

* The http package comes installed by default with node.js
* We define our server with callback and port to listen
* To run our server:
> node index.js
* We go to localhost:8080 to check the results

------------------------------------------------------------------------
Class 09 - Docker and MongoDB (Theory)

* Docker is a tool designed to make it easy the creation, deploy, and execution
using containers.
* A container is a unit of software that encapsulates the code and all of its 
dependencies to execute the code in a fast and reliable way regardless of the
environment
	* Includes everything that is necessary to run the software, such as the code
	itself, system tools, configurations 

* Access https://www.docker.com/, download and install it

* Check docker version:
> docker -

* Docker images: Similar to a virtual machine, but lighter. A container run 
from a docker image
	* At Docker Hub we have a bunch of freely available docker 

* MongoDB docker image
	* Go to https://hub.docker.com/_/mongo
		* Oficial mongo docker image
	
	* To download the docker image from docker hub:
	> docker pull mongo
	
	* After downloading the image we can check the image locally:
	> docker image ls
	
	* Run docker:
	> docker run --name mongodb -p 27017:27017 -d mongo:latest
		* mongodb: container name
		* 27017:27017 : Port to access docker. Makes a bind of the internal port 27017
		of the docker container to an external port (outside the container), which
		is also 27017.
			* The port in the left is the external port
			* The port in the right is the internal port
		* -d: To run in background
		* mongo:latest : Specifies the image we want to upload to this container
			* Using just mongo also works, and docker will get the latest version
			* We can specify the version
	
	* Check running containers:
	> docker ps

	* Stop docker container:
	> docker stop mongodb

	* Check stopped containers:
	> docker ps -
	
	* Start container again:
	> docker start mongodb

	* Restart container again:
	> docker restart mongodb

	* Destroy container: 
	> docker rm -vf mongodb

	* Execute docker container (after running it):
	> docker exec -it mongodb bash
		* -it : interactive
		* mongodb : container name
		* bash : command we want to access inside the container. Bash is to access 
		the container's terminal

	* Check mongodb version inside the container:
	> mongo --version

	* Get inside mongodb:
	> mongo -u root -p
		* password: 

	* With mongodb running in a docker container we can create an application and 
	connect to this database

------------------------------------------------------------------------
Class 09 - Docker and MongoDB (Practice)

* docker-compose : Another way to run containers

* Install docker-compose: https://docs.docker.com/compose/install/

* Check if docker-compose is installed in our system:
> docker-compose -v
	
Class09 - Practice:
* We created a folder 'api' and a file named 'docker-compose.yml'
* Go to VSCode extensions and install YAML
* Open docker-compose.yml and configure the file
	* See how it is configured in the class09/api folder 
* We have to enter at folder api through the command line
* To run the docker compose:
> docker-compose up -d
	* If the container named in docker-compose.yml is already running an error 
	will pop. You have to make sure the docker image is not running. It is 
	possible to delete the container with:
	> docker rm -vf mongodb
* You can check if the docker image started with:
> docker ps -a
* Enter container bash:
> docker exec -it mongodb bash
* Enter mongodb:
> mongo -u root -p
* Show dbs:
> show dbs

* To put the container down:
> docker-compose down
	* Checking 'docker ps -a' will not list the container anymore

* To restart container:
> docker-compose restart

Docker Compose
* Much simpler command line way to run a docker image
* The downside is to configure a file docker-compose.yml
* But after the file is configured is is much more easier with docker-compose
* Instead of executing each docker image by hand with 'docker run', and 
and linking them manually, with docker compose we have a single file to do this 
orchestration and put up all the services/containers at once. 
* This lessens the admins or developers responsibility to manage and deploy and
to worry with running all the commands to run the	services and its dependencies.
 
------------------------------------------------------------------------
Class 10 - Working with databases

1. Go to 'api' folder and run '$ yarn init'. A file package.json is created

2. '$ yarn add mongoose'. mongoose is a dependency. It is a RM, a library used
to connect to the database. It has various methods to manipulate the database.

3. '$ yarn add --dev nodemon'
Nodemon is used to run our server in simpler way

4. index.js runs our server. It is basically the same code from class08, where
we created our first http server. But now we have configurations for the database
too.

5. The connection to the database can be done with 'mongoose.connect()'. To 
configure this method we have to check the information configured in docker-compose.yml.

6. Put docker image up with '$ docker-compose up -d'. You can check running containers 
with '$ docker ps -a'

7.We run our server '$ node index.js' and can access it in the browser through
http://localhost:8080/ 

Resume: We put up a docker container with mongodb running and configured mongoose
to access it. In the server we first inserted a piece of data to the mongo database
and later we read this information and send it to the front-end user (browser).

* Reminder: Before all that we had to configure docker-compose.yml and create
a package.json file with 'yarn init' to specify our project's dependencies.

------------------------------------------------------------------------
Class 11 - Creating Routes

1. We added to the package.json file the following:

"scripts": {
    "start": "nodemon index.js"
}

It creates a script named 'start'. So running '$ yarn start' will run the 
script. The script runs 'nodemon index.js' running our server. Instead of 
using 'node index.js' to run the server, nodemon will stop and restart our 
server automatically every time we alter and save index.js

Nodemon is a good tool for a developing environment.

Try altering the index.js file and save it. Keep an eye at the terminal to 
check the server being restarted by nodemon.

2. We altered our server so it can send different messages to the user 
based on the url pathname. 

If the client enters in 'localhost:8080/users' 
than it will send the front-end the users from the mongo database.

If the client is at 'localhost:8080' or any other url path, than it send 
the client a message 'Another message'.

Resume: We created two routes for our application. One route is 
localhost:8080/users and all other url paths. For each of the two groups of 
urls we had an specific message sent to the client.

------------------------------------------------------------------------
Class 12 - API Requests

1. To simulate POST requests we actually have to build a html page a force 
a post. To avoid it we can use an application called Insomnia. You can
download the software here: https://insomnia.rest/download

2. Go to the command line and start the server with 'yarn start', which
will run our script configure in package.json

3. Start Insomnia software and create a new request (CTRL + N). Access
localhost:8080/users and select a GET or POST method. When you run the 
request you will see the return from the server on the console.
	* Insomnia is a software to work with HTTP requests.

Other alternatives:

1. Besides Insomnia there is still another application we can use fro HTTP
requests. It's called Postman: https://www.postman.com/downloads/.

2. There is a web version to mock api too: https://hoppscotch.io/pt-br

3. Command line approach using curl to mock APIs:

> curl -X POST 'http://localhost:8080/users'
> curl -X GET 'http://localhost:8080/users'

* Tip: In VSCode you can open two terminal with a split screen. In one
you run 'yarn start' to run the server. In the second you can use curl 
to mock requests.

4. VSCode Extension: REST Client
Allows us to send HTTP request and view the response in VSCode directly.

To use the extension first write either one of the requests below:

GET http://localhost:8080/users
POST http://localhost:8080/users

Copy one of them, press CTRL + SHIFT + p, type 'rest send', and select
the option 'Rest Client: Send Request'. Rest Client will understand the
request copied in memory (CTRL + C) and run the request/response in a
new tab.

------------------------------------------------------------------------
Class 13 - Registering data to database

------------------------------------------------------------------------
